#include <micro_ros_arduino.h>

#include <stdio.h>
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/Float32.h>
#include <geometry_msgs/msg/twist.h>
#include <ESP32Encoder.h>


rcl_subscription_t subscriber;

rcl_publisher_t en1_publisher;
rcl_publisher_t en2_publisher;
geometry_msgs__msg__Twist msg;
std_msgs__msg__Float32 en1_msg;
std_msgs__msg__Float32 en2_msg;
rclc_executor_t executor;
rcl_allocator_t allocator;
rclc_support_t support;
rcl_node_t node;

ESP32Encoder encoder;
ESP32Encoder encoder2;

unsigned long encoder2lastToggled;
bool encoder2Paused = false;

const int EN_1 = 5;
const int EN_2 = 21;
const int IN1_A = 12;
const int IN1_B = 13;
const int IN2_A = 22;
const int IN2_B = 23;
#define LED_PIN 13

#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}

void error_loop(){
  while(1){
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
    delay(100);
  }
}

//twist message cb
void subscription_callback(const void *msgin) {
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
  // if velocity in x direction is 0 turn off LED, if 1 turn on LED
 // digitalWrite(LED_PIN, (msg->linear.x == 0) ? LOW : HIGH);
  Serial.print("linear x : ");
  Serial.println(msg->linear.x);
  Serial.print("linear Y : ");
  Serial.println(msg->linear.y);
  Serial.print("linear Z : ");
  Serial.println(msg->linear.z);
  Serial.print("angular x : ");
  Serial.println(msg->angular.x);
  Serial.print("angular Y : ");
  Serial.println(msg->angular.y);
  Serial.print("angular Z : ");
  Serial.println(msg->angular.z);
  // if(msg->linear.x >= 0.5){
  //       analogWrite(EN_1, 255);  // set the brightness of led

 
  //   digitalWrite(IN1_A, HIGH);
  //   digitalWrite(IN1_B, LOW);


  //   analogWrite(EN_2, 255);  // set the brightness of led

  //   digitalWrite(IN2_A, HIGH);
  //   digitalWrite(IN2_B, LOW);
  // }
  // else{
  //        analogWrite(EN_1, 255);  // set the brightness of led

 
  //   digitalWrite(IN1_A, LOW);
  //   digitalWrite(IN1_B, LOW);


  //   analogWrite(EN_2, 255);  // set the brightness of led

  //   digitalWrite(IN2_A, LOW);
  //   digitalWrite(IN2_B, LOW);
  // }




//-----------------------

 double x = msg->linear.x;
 double z = msg->angular.z;

 double moveL = x+(z/2);
 double moveR = x-(z/2);

  
if (moveL>0.0){
      analogWrite(EN_1,255);
    digitalWrite(IN1_A, HIGH);
    digitalWrite(IN1_B, LOW);
    }else if (moveL<0.0){
 analogWrite(EN_1,255);
    digitalWrite(IN1_A, LOW);
    digitalWrite(IN1_B, HIGH);
    }else{ 
 analogWrite(EN_1,0);
        digitalWrite(IN1_A, LOW);
        digitalWrite(IN1_B, LOW);
 }

if (moveR>0.0){
      analogWrite(EN_2,255);
    digitalWrite(IN2_A, HIGH);
    digitalWrite(IN2_B, LOW);
    }else if (moveR<0.0){
 analogWrite(EN_2,255);
    digitalWrite(IN2_A, LOW);
    digitalWrite(IN2_B, HIGH);
    }else{ 
 analogWrite(EN_2,0);
    digitalWrite(IN2_A, LOW);
    digitalWrite(IN2_B, LOW);
        }

//  if(cmd_vel.linear.y>=1.0){ 
//  digitalWrite(42,1);
//  } else  {
//  digitalWrite(42,0);
//  }


//------------------












}

void setup() {

    pinMode(EN_1, OUTPUT);
  pinMode(IN1_A, OUTPUT);
  pinMode(IN1_B, OUTPUT);

  pinMode(EN_2, OUTPUT);
  pinMode(IN2_A, OUTPUT);
  pinMode(IN2_B, OUTPUT);

  Serial.begin(9600);
  set_microros_wifi_transports("DEAR11_2.4GHz", "08110171188", "192.168.1.64", 8888);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, HIGH);  
  
	//ESP32Encoder::useInternalWeakPullResistors=DOWN;
	// Enable the weak pull up resistors
	ESP32Encoder::useInternalWeakPullResistors=UP;

	// use pin 19 and 18 for the first encoder
	encoder.attachHalfQuad(19, 18);
	// use pin 17 and 16 for the second encoder
	encoder2.attachHalfQuad(25, 26);
		
	// set starting count value after attaching
	encoder.setCount(37);

	// clear the encoder's raw count and set the tracked count to zero
	encoder2.clearCount();
	Serial.println("Encoder Start = " + String((int32_t)encoder.getCount()));



  allocator = rcl_get_default_allocator();

   //create init_options
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));

  // create node
  RCCHECK(rclc_node_init_default(&node, "micro_ros_arduino_node", "", &support));

  // create subscriber
  RCCHECK(rclc_subscription_init_default(
    &subscriber,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
    "cmd_vel"));
  RCCHECK(rclc_publisher_init_default(
    &en1_publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
    "en_1"));
    

      RCCHECK(rclc_publisher_init_default(
    &en2_publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
    "en_2"));
  // create executor
  RCCHECK(rclc_executor_init(&executor, &support.context, 1, &allocator));
  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber, &msg, &subscription_callback, ON_NEW_DATA));

}

void loop() {
   
  delay(100);
  RCCHECK(rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100)));



   	Serial.println("Encoder count = " + String((int32_t)encoder.getCount()) + " " + String((int32_t)encoder2.getCount()));
    en1_msg.data = (int32_t)encoder.getCount();
    en2_msg.data = (int32_t)encoder2.getCount();
    RCSOFTCHECK(rcl_publish(&en1_publisher, &en1_msg, NULL));
    RCSOFTCHECK(rcl_publish(&en2_publisher, &en2_msg, NULL));
}
